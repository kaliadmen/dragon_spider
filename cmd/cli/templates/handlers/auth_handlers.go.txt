package handlers

import (
	"bytes"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/CloudyKit/jet/v6"
	"github.com/go-chi/chi/v5"
	"github.com/gorilla/sessions"
	"github.com/kaliadmen/mailer"
	"github.com/kaliadmen/urlsigner"
	"github.com/markbates/goth"
	"github.com/markbates/goth/gothic"
	"github.com/markbates/goth/providers/github"
	"github.com/markbates/goth/providers/google"
	"log"
	"myapp/data"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

func (h *Handlers) UserLogin(w http.ResponseWriter, r *http.Request) {
	err := h.App.Render.Page(w, r, "login", nil, nil)
	if err != nil {
		h.App.ErrorLog.Println(err)
	}
}

func (h *Handlers) PostUserLogin(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		_, err := w.Write([]byte(err.Error()))
		if err != nil {
			h.App.ErrorLog.Println(err)
			return
		}
		return
	}

	email := r.Form.Get("email")
	password := r.Form.Get("password")

	user, err := h.Models.Users.GetByEmail(email)
	if err != nil {
		_, err := w.Write([]byte("Invalid email or password" + err.Error()))
		if err != nil {
			h.App.ErrorLog.Println(err)
			return
		}
		return
	}

	doesMatch, err := user.MatchPassword(password)
	if err != nil {
		_, err := w.Write([]byte("Error validating password: " + err.Error()))
		if err != nil {
			h.App.ErrorLog.Println(err)
			return
		}
		return
	}

	if !doesMatch {
		_, err := w.Write([]byte("Invalid email or password"))
		if err != nil {
			h.App.ErrorLog.Println(err)
			return
		}
		return

	}

	if r.Form.Get("remember_me") == "remember_me" {
		//create a token
		randStr := h.App.RandomString(12)
		hasher := sha256.New()

		_, err := hasher.Write([]byte(randStr))
		if err != nil {
			h.App.ErrorStatus(w, http.StatusBadRequest)
			return
		}

		sha := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
		rt := data.RememberToken{}
		err = rt.Insert(user.Id, sha)
		if err != nil {
			h.App.ErrorStatus(w, http.StatusBadRequest)
			return
		}

		//set cookie
		expiresAt := time.Now().Add(30 * 24 * time.Hour)
		cookie := http.Cookie{
			Name:     fmt.Sprintf("_%s_remember_me", h.App.AppName),
			Value:    fmt.Sprintf("%d|%s", user.Id, sha),
			Path:     "/",
			Domain:   h.App.Session.Cookie.Domain,
			Expires:  expiresAt,
			MaxAge:   2628288,
			Secure:   h.App.Session.Cookie.Secure,
			HttpOnly: true,
			SameSite: http.SameSiteStrictMode,
		}
		http.SetCookie(w, &cookie)
		h.App.Session.Put(r.Context(), "remember_token", sha)

	}

	h.App.Session.Put(r.Context(), "userId", user.Id)

	http.Redirect(w, r, "/", http.StatusSeeOther)

}

func (h *Handlers) UserLogout(w http.ResponseWriter, r *http.Request) {
	err := h.App.Session.RenewToken(r.Context())
	if err != nil {
		h.App.ErrorLog.Println(err)
		return
	}
	if h.App.Session.Exists(r.Context(), "remember_token") {
		rt := data.RememberToken{}
		_ = rt.DeleteByToken(h.App.Session.GetString(r.Context(), "remember_token"))
	}

	//logout of OAuth
	h.OAuthLogout(w, r)

	cookie := http.Cookie{
		Name:     fmt.Sprintf("_%s_remember_me", h.App.AppName),
		Value:    "",
		Path:     "/",
		Domain:   h.App.Session.Cookie.Domain,
		Expires:  time.Now().Add(-100 * time.Hour),
		MaxAge:   -1,
		Secure:   h.App.Session.Cookie.Secure,
		HttpOnly: true,
		SameSite: http.SameSiteStrictMode,
	}
	http.SetCookie(w, &cookie)

	h.App.Session.Remove(r.Context(), "userId")
	h.App.Session.Remove(r.Context(), "remember_token")
	err = h.App.Session.Destroy(r.Context())
	if err != nil {
		h.App.ErrorLog.Println(err)
		return
	}

	err = h.App.Session.RenewToken(r.Context())
	if err != nil {
		h.App.ErrorLog.Println(err)
		return
	}
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (h *Handlers) ForgetPassword(w http.ResponseWriter, r *http.Request) {
	err := h.render(w, r, "forgot", nil, nil)
	if err != nil {
		h.App.ErrorLog.Println("Error rendering: ", err)
		h.App.Error500(w)
	}
}

func (h *Handlers) PostForgetPassword(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		h.App.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	//is email of a existing user
	var u *data.User
	email := r.Form.Get("email")
	u, err = u.GetByEmail(email)
	if err != nil {
		h.App.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	//create signed link
	link := fmt.Sprintf("%s/users/password/reset?email=%s", h.App.Server.URL, email)
	sign := urlsigner.Signature{
		Secret: h.App.EncryptionKey,
	}

	signedLink, _ := sign.SignUrl(link)
	h.App.InfoLog.Println(signedLink)

	//send Email
	var linkData struct {
		Link string
	}
	linkData.Link = signedLink

	msg := mailer.Message{
		To:       u.Email,
		From:     "admin@mitsudo.io",
		Subject:  "Password reset",
		Template: "password_reset",
		Data:     linkData,
	}

	h.App.Mail.Jobs <- msg
	res := <-h.App.Mail.Results
	if res.Error != nil {
		fmt.Println(res.Error)
		h.App.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	h.App.Session.Put(r.Context(), "flash", "Check you email!")
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) ResetPassword(w http.ResponseWriter, r *http.Request) {
	//get form values
	email := r.URL.Query().Get("email")
	url := r.RequestURI
	testUrl := fmt.Sprintf("%s%s", h.App.Server.URL, url)

	signer := urlsigner.Signature{Secret: h.App.EncryptionKey}

	//validate url
	if _, err := signer.VerifyUrl(testUrl); err != nil {
		h.App.ErrorLog.Println("Invalid url")
		h.App.ErrorUnauthorized(w)
		return
	}

	//check expiration (60 minutes)
	if signer.IsExpired(testUrl, 60) {
		h.App.ErrorLog.Println("Link has expired")
		h.App.ErrorUnauthorized(w)
		return
	}

	//display password reset form
	encryptedEmail, err := h.encrypt(email)
	if err != nil {
		h.App.ErrorLog.Println("encryption failed", err)
		h.App.Error500(w)
		return
	}

	vars := make(jet.VarMap)
	vars.Set("email", encryptedEmail)
	err = h.render(w, r, "reset-password", vars, nil)
	if err != nil {
		h.App.ErrorLog.Println(err)
		h.App.Error500(w)
		return
	}
}

func (h *Handlers) PostResetPassword(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		h.App.Error500(w)
		return
	}

	email, err := h.decrypt(r.Form.Get("email"))
	if err != nil {
		h.App.Error500(w)
		return
	}

	var u data.User
	user, err := u.GetByEmail(email)
	if err != nil {
		h.App.Error500(w)
		return
	}

	err = user.ResetPassword(user.Id, r.Form.Get("password"))
	if err != nil {
		h.App.Error500(w)
		return
	}

	h.App.Session.Put(r.Context(), "flash", "Password has been reset")
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)

}

func (h *Handlers) InitOAuth() {
	//scope of data needed from provider
	gitScope := []string{"user"}
	googleScope := []string{"email", "profile"}

	goth.UseProviders(
		github.New(os.Getenv("GITHUB_KEY"), os.Getenv("GITHUB_SECRET"), os.Getenv("GITHUB_CALLBACK"), gitScope...),
		google.New(os.Getenv("GOOGLE_KEY"), os.Getenv("GOOGLE_SECRET"), os.Getenv("GOOGLE_CALLBACK"), googleScope...),
	)

	isSecure, err := strconv.ParseBool(os.Getenv("DEBUG"))
	if err != nil {
		isSecure = false
	}
	//setup cookie store for goth package
	key := os.Getenv("KEY")
	maxAge := 86400 * 30
	cs := sessions.NewCookieStore([]byte(key))
	cs.MaxAge(maxAge)
	cs.Options.Path = "/"
	cs.Options.Secure = !isSecure
	cs.Options.HttpOnly = true

	//session store that only exist during the login process
	gothic.Store = cs
}

func (h *Handlers) OAuthLogin(w http.ResponseWriter, r *http.Request) {
	provider := chi.URLParam(r, "provider")
	h.App.Session.Put(r.Context(), "oauth_provider", provider)
	h.InitOAuth()

	if _, err := gothic.CompleteUserAuth(w, r); err == nil {
		http.Redirect(w, r, "/", http.StatusSeeOther)
	} else {
		gothic.BeginAuthHandler(w, r)
	}
}

func (h *Handlers) OAuthLogout(w http.ResponseWriter, r *http.Request) {
	provider, ok := h.App.Session.Get(r.Context(), "oauth_provider").(string)
	if !ok {
		h.App.InfoLog.Println("here")
		return
	}

	//call provider api to logout
	//revoke authorization token
	switch provider {
	case "github":
		clientId := os.Getenv("GITHUB_KEY")
		clientSecret := os.Getenv("GITHUB_SECRET")
		token := h.App.Session.Get(r.Context(), "oauth_token").(string)

		var payload struct {
			AccessToken string `json:"access_token"`
		}
		payload.AccessToken = token

		jsonReq, err := json.Marshal(payload)
		if err != nil {
			h.App.ErrorLog.Println(err)
		}
		req, err := http.NewRequest(http.MethodDelete,
			fmt.Sprintf("https://%s:%s@api.github.com/applications/%s/grant",
				clientId, clientSecret, clientId), bytes.NewBuffer(jsonReq))
		if err != nil {
			h.App.ErrorLog.Println(err)
			return
		}

		client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			h.App.ErrorLog.Println("Error logging out of GitHub: ", err)
			return
		}
	case "google":
		token := h.App.Session.Get(r.Context(), "oauth_token").(string)
		_, err := http.PostForm(fmt.Sprintf("https://accounts.google.com/o/oauth2/revoke?%s", token), nil)
		if err != nil {
			h.App.ErrorLog.Println("Error logging out of Google: ", err)
			return
		}
	}
}

func (h *Handlers) OAuthCallback(w http.ResponseWriter, r *http.Request) {
	h.InitOAuth()

	gothUser, err := gothic.CompleteUserAuth(w, r)
	if err != nil {
		h.App.Session.Put(r.Context(), "error", err.Error())
		http.Redirect(w, r, "/users/login", http.StatusSeeOther)
		return
	}

	//look up user using email
	var u data.User
	var testUser *data.User

	testUser, err = u.GetByEmail(gothUser.Email)
	if err != nil {
		log.Println(err)
		provider := h.App.Session.Get(r.Context(), "oauth_provider").(string)
		//add user that doesn't exist'
		var newUser data.User

		switch provider {
		case "github":
			ex := strings.Split(gothUser.Name, " ")
			newUser.FirstName = ex[0]
			if len(ex) > 1 {
				newUser.LastName = ex[1]
			}
		case "google":
			newUser.FirstName = gothUser.FirstName
			newUser.LastName = gothUser.LastName

		default:
			h.App.Session.Put(r.Context(), "error", "OAuth provider not supported")
			http.Redirect(w, r, "/users/login", http.StatusSeeOther)
			return
		}

		newUser.Active = 1
		newUser.Email = gothUser.Email
		newUser.Password = h.App.RandomString(20)
		newUser.CreatedAt = time.Now()
		newUser.UpdatedAt = time.Now()

		_, err := newUser.Insert(newUser)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			h.App.Session.Put(r.Context(), "error", err.Error())
			http.Redirect(w, r, "/users/login", http.StatusBadRequest)
			return
		}

		testUser, err = u.GetByEmail(gothUser.Email)
		if err != nil {
			h.App.Session.Put(r.Context(), "error", err.Error())
			http.Redirect(w, r, "/users/login", http.StatusUnauthorized)
		}
	}

	h.App.Session.Put(r.Context(), "userId", testUser.Id)
	h.App.Session.Put(r.Context(), "oauth_token", gothUser.AccessToken)
	h.App.Session.Put(r.Context(), "oauth_email", gothUser.Email)

	h.App.Session.Put(r.Context(), "flash", "You are now logged in")
	http.Redirect(w, r, "/", http.StatusSeeOther)
}
